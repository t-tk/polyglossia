#!/bin/bash

if [ z"$1" = z ]; then
    branch=master
else
    branch="$1"
fi

# TODO Check branch
warn_and_exit=false
line=`git status | fgrep 'Your branch is ahead' | wc -l`
if [ "$line" = 1 ]; then
  warn_and_exit=true
elif [ `git status -s | cut -c -2 | egrep -c 'M|A'` -gt 0 ]; then
  echo foo
  # warn_and_exit=true
fi

if $warn_and_exit; then
  echo "Please commit and push your changes to GitHub!"
  exit -1
fi

# TODO Test zip and DTX file thus produced!

pgroot=`dirname $0`

first_char=`echo $pgroot | sed -e 's/^\(.\).*$/\1/'`

if [ "$first_char" != '/' ]; then
  pgroot="`pwd`/$pgroot"
fi

origdir=`pwd`
tmpdir=`mktemp -d`
root=$tmpdir/polyglossia

cd $tmpdir
git clone --branch $branch https://github.com/reutenauer/polyglossia
builddir="$root/build"
mkdir -p $builddir

pdf="$root/doc/polyglossia.pdf"
pdfsrc="$root/doc/polyglossia.tex"
pdfbasename=${pdf%.pdf}

cd $root
source ./env

# Overrides the default 79.  This makes for overly long lines in TeX’s
# output, but at least it’s easy to see what’s on the same line and
# what’s not (within the first 2048, of course).
# The default is set by kpathsea, but it’s just easier to make it an
# environment variable).
max_print_line=2048
export max_print_line
# check if pdf is older than polyglossia.tex
if [[ ! -f $pdf || $pdf -ot $pdfsrc  ]] ; then
  echo "Updating PDF documentation ..."
	cd $root/doc 
        echo "Environment: TEXINPUTS=$TEXINPUTS"
        echo "bidi.sty: `kpsewhich bidi.sty`"
	xelatex $pdfsrc || exit 1
	xelatex $pdfsrc 
	xelatex $pdfsrc 
        cp -f $pdf $pgroot/generated
  rm -f $pdfbasename.{aux,toc,lof,lot,lop,log,out,nav,bbl,blg,ind,idx,glo,ilg,dvi}
  for doc in example-arabic example-thai example-chinese example-japanese example-korean examples; do
    echo "COMPILING doc '$doc'"
    cd $root/doc
    # The line below generates an error even if things don’t go wrong,
    # and quite frankly I don’t know what it’s good for.
    # First of all, the last bit should be echo "Failed to compile ..."
    # but I won’t bother
    # xelatex $doc.tex || exit 1 && "Failed to compile $doc.tex"
    xelatex $doc.tex || exit 1
    xelatex $doc.tex
    xelatex $doc.tex
    rm -f $doc.{log,aux,toc}
    cp -f $doc.pdf $pgroot/generated
    cd $root
  done
fi

cd $root
echo "Making polyglossia.{dtx,ins}"
test -d $builddir || mkdir $builddir
# echo $builddir # TODO Finish the job
perl makepolyglossiadtx.pl || exit 1
mv polyglossia.dtx $builddir || exit 1
cd $builddir
(
cat <<'EOF'
\begingroup
\input docstrip.tex
\keepsilent
\nopreamble\nopostamble
\generate{\file{polyglossia.ins}{\from{polyglossia.dtx}{batchfile}}}
\endgroup
\bye
EOF
) > makeins.tex
# xetex makeins.tex 2&> /dev/nul
rm -f polyglossia.ins # Otherwise docstrip expects interactive input
xetex makeins.tex
# rm makeins.*
#rm *.{sty,def,lde,ldf,map,txt,tex,glo,log,out,idx,aux,toc} 2&> /dev/null

echo "Create TDS tree ..."
TDS_src="$builddir/source/latex/polyglossia"
TDS_tex="$builddir/tex/latex/polyglossia"
TDS_doc="$builddir/doc/latex/polyglossia"
TDS_map="$builddir/fonts/misc/xetex/fontmapping/polyglossia"
mkdir -p $TDS_src
mkdir -p $TDS_tex
mkdir -p $TDS_doc
mkdir -p $TDS_map
cp polyglossia.dtx $TDS_src/ || exit 1
cp $root/tex/* $TDS_tex/ || exit 1
cp $root/doc/* $TDS_doc/ || exit 1
cp $root/README.md $TDS_doc/ || exit 1
cp $root/fontmapping/* $TDS_map/ || exit 1

echo "Update TECkit mappings ..."
cd $TDS_map
for map in *.map; do
    teckit_compile $map || exit 1
done

echo "Make TDS tarball ..."
cd $builddir
tarball="polyglossia.tds.zip"
zip $tarball tex/latex/polyglossia/*.{lde,ldf,def,sty,lua} || exit 1
zip $tarball fonts/misc/xetex/fontmapping/polyglossia/* || exit 1
zip $tarball source/latex/polyglossia/polyglossia.dtx || exit 1
zip $tarball doc/latex/polyglossia/*.{tex,pdf} || exit 1
zip $tarball doc/latex/polyglossia/README.md || exit 1

echo "Make CTAN zip ..."
ctanzip="polyglossia.zip"
mkdir -p $builddir/tmp/polyglossia
cd $builddir/tmp
mv $builddir/$tarball . || exit 1
mv $builddir/polyglossia.dtx polyglossia/ || exit 1
cp $root/doc/polyglossia.pdf polyglossia/ || exit 1
cp $root/README.md polyglossia/ || exit 1
zip -9 $ctanzip polyglossia/* README.md polyglossia.tds.zip || exit 1
mv $ctanzip $root/ || exit 1
cd $root
mv -f $root/doc/*.pdf $root/generated || exit 1
rm -rf $builddir

echo "$ctanzip is ready to upload"
mv -f $ctanzip $pgroot/
cd $origdir
exit 0
